{% layout "proxserve/layout.liquid", pageTitle: 'About & Getting Started' %}

{% block body %}
<div class="blocks-row">
	<div class="block">
		<h1>Proxy Observe</h1>
		<p>Proxserve is a lightweight and very fast javascript library for observing any changes made to an object.<br>
		It was initially made for the <a href="{{ ohUrl }}">OH!</a> library but has grown so much that it is now a full-blown library by itself.<br>
		With Proxserve you are using plain old javascript objects with the addition of adding event listeners directly on properties and monitoring
		any changes made to these properties and sub-objects.</p>
	</div>
</div>
<div class="blocks-row docs">
	<div class="block">
		<h2 id="installation">Installation<a class="anchor" href="#installation"></a></h2>
		<p>Proxserve runs on both client side and server side (<a href="https://nodejs.org" target="_blank">Node.js</a>)</p>
		
		<h4 id="server-side">Server side<a class="anchor" href="#server-side"></a></h4>
		<p>Run the following command in the terminal</p>
		<code-block data-language="bash">
npm install proxserve --save
		</code-block>
		<p>Then require it:</p>
		<code-block data-language="javascript">
const Proxserve = require('proxserve');
		</code-block>
		
		<h4 id="client-side">Client side<a class="anchor" href="#client-side"></a></h4>
		<p>Simplest way is to use a CDN<br>
		<span class="note">Don't forget to replace "1.x.x" with the desired version (recent version is <span id="proxserve-recent-version">1.x.x</span>)<span></p>
		<script>
fetch('https://api.github.com/repos/noamlin/proxserve/tags',
{
	method: 'GET',
	mode: 'cors',
	headers: {
		'Content-Type': 'application/json'
	}
})
.then(response => response.json())
.then(data => {
	let latest = data[0].name;
	if(latest[0].toLowerCase() === 'v') {
		latest = latest.slice(1);
	}
	document.querySelector('#proxserve-recent-version').textContent = latest;
})
.catch(error => {
	console.error(error);
});
		</script>
		<code-block data-language="html">
&lt;script src="https://cdn.jsdelivr.net/npm/proxserve@1.x.x/dist/proxserve.min.js"&gt;&lt;/script&gt;
or
&lt;script src="https://cdn.jsdelivr.net/npm/proxserve/dist/proxserve.min.js"&gt;&lt;/script&gt;
		</code-block>
		<p>If installed on your server, you may serve Proxserve on your own.<br>
		The files for distribution are located at "node_modules/proxserve/dist/".<br>
		<span class="note">You may choose between an unminified (proxserve.js) and minified (proxserve.min.js) versions</span></p>
		<code-block data-language="html">
&lt;script src="http://your-domain.com/path-to/proxserve/dist/proxserve.min.js"&gt;&lt;/script&gt;
		</code-block>
	</div>
</div>
<div class="blocks-row docs">
	<div class="block">
		<h2 id="basic-usage">Basic usage<a class="anchor" href="#basic-usage"></a></h2>
		<p>Note: for those who haven't worked with proxy objects before - Proxserve object actually masks a target object. Altering the proxy object allows it to trap your handlers (set, get, etc.) and do custom operations on the target object that is behind it</p>
		
		<h4 id="initialization">Initialization<a class="anchor" href="#initialization"></a></h4>
		<code-block data-language="javascript">
//verbose way
const originalObj = { ... };
const smartObj = new Proxserve(originalObj);

//short way
const smartObj = new Proxserve({ ... });
		</code-block>
		<p><i class="fas fa-exclamation warning round"></i> Caution: after initiating a Proxserve do not refer to the original object. This will bypass Proxserve and will not emit events</p>
		<code-block data-language="javascript">
const Proxserve = require('proxserve');
const userData = {
	name: 'John',
	last_name: 'Doe',
	age: 30
};
const user = new Proxserve(userData);

userData.age = 40; //bad practice
user.age = 40; //good practice
		</code-block>
		
		<h4 id="basic-event-listeners">Basic Event Listeners<a class="anchor" href="#basic-event-listeners"></a></h4>
		<p>There are 3 events - "create", "update" & "delete". You may listen to one of them or to all of them</p>
		<code-block data-language="javascript">
//verbose way
const originalObj = { ... };
const smartObj = new Proxserve(originalObj);

//short way
const smartObj = new Proxserve({ ... });
		</code-block>
	</div>
</div>
{% endblock %}